generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  role          Role      @default(CONSUMER)
  createdAt     DateTime  @default(now())

  merchant  Merchant?
  favorites Favorite[]
  accounts Account[]
  sessions Session[]
}

model Merchant {
  id          String   @id @default(cuid())
  userId      String   @unique
  storeName   String
  description String?
  logoUrl     String?
  phone       String?
  address     String?

  user     User     @relation(fields: [userId], references: [id])
  products Product[]
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  products Product[]
}

model Product {
  id           String         @id @default(cuid())
  merchantId   String
  title        String
  slug         String         @unique
  description  String
  priceCents   Int
  stock        Int            @default(0)
  status       ProductStatus  @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  categoryId   String
  // Campo para FTS (tsvector) — criado via migração SQL
  searchVector Unsupported("tsvector")?

  merchant     Merchant       @relation(fields: [merchantId], references: [id])
  category     Category       @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  favorites    Favorite[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int     @default(0)

  product   Product @relation(fields: [productId], references: [id])
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

enum Role {
  CONSUMER
  MERCHANT
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


